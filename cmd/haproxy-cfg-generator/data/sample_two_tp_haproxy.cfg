global
        log 127.0.0.1 local0
        log 127.0.0.1 local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        maxconn 2000000
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3
        nbproc 64        
        cpu-map auto:1-64  0-63
        stats bind-process 64
        

defaults
        log     global
        mode    http
        option logasap
        option  httplog
        option  dontlognull
        retries 3
        maxconn 2000000
        timeout connect 5000
        timeout client  10m
        timeout server  10m
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http


# the following setup can be used to enable the stats page of proxy
#listen stats
#    bind *:8404
#    stats enable
#    stats hide-version
#    stats refresh 10s
#    stats show-node
#    stats uri  /stats

frontend scale-out-proxy
    bind *:8888 alpn h2,http/1.1
    bind *:443 ssl crt /etc/haproxy/pki/kubemark-client-proxy.pem

    
    acl tp_1_request_2 path_reg ^/api/[a-z0-9_.-]+/tenants/(?!(system$|system/.*$|all$|all/.*$))([a-m].*)$
    acl tp_1_request_1 path_reg ^/apis/[a-z0-9_.-]+/[a-z0-9_.-]+/tenants/(?!(system$|system/.*$|all$|all/.*$))([a-m].*)$

    acl tp_2_request_2 path_reg ^/api/[a-z0-9_.-]+/tenants/(?!(system$|system/.*$|all$|all/.*$))([n-z].*)$
    acl tp_2_request_1 path_reg ^/apis/[a-z0-9_.-]+/[a-z0-9_.-]+/tenants/(?!(system$|system/.*$|all$|all/.*$))([n-z].*)$
    
    acl node_request path_reg ^/api/[a-z0-9_.-]+/nodes.*$
    acl lease_request path_reg ^/apis/coordination.k8s.io/[a-z0-9_.-]+/leases.*$
    acl individual_lease_request path_reg ^/apis/[a-z0-9_.-]+/[a-z0-9_.-]+/tenants/system/namespaces/kube-node-lease/leases.*$
	

    
    acl from_tenant_api_1 src 1.1.1.1
    acl from_tenant_api_2 src 2.2.2.2
    
    acl from_resource_api src 9.9.9.9

    # Note: the order of backend search rules matters. The first matching rule will be used. 
    use_backend resource_api if node_request OR lease_request OR individual_lease_request
    
    use_backend tenant_api_1 if tp_1_request_1 OR tp_1_request_2
    use_backend tenant_api_2 if tp_2_request_1 OR tp_2_request_2

    
    use_backend tenant_api_1 if from_tenant_api_1
    use_backend tenant_api_2 if from_tenant_api_2
    use_backend resource_api if from_resource_api
    
    default_backend tenant_api_1

backend tenant_api_1
    option tcp-check
    tcp-check connect
    server tp_1 1.1.1.1:443 maxconn 500000 ssl check ca-file /etc/haproxy/ca.crt

backend tenant_api_2
    option tcp-check
    tcp-check connect
    server tp_2 2.2.2.2:443 maxconn 500000 ssl check ca-file /etc/haproxy/ca.crt

backend resource_api
    option tcp-check
    tcp-check connect
    server rp 9.9.9.9:443 maxconn 500000 ssl check ca-file /etc/haproxy/ca.crt
