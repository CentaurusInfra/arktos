/*
Copyright The Kubernetes Authors.
Copyright 2020 Authors of Arktos - file modified.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/auditregistration/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AuditSinkLister helps list AuditSinks.
type AuditSinkLister interface {
	// List lists all AuditSinks in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AuditSink, err error)
	// AuditSinks returns an object that can list and get AuditSinks.
	AuditSinks() AuditSinkTenantLister
	AuditSinksWithMultiTenancy(tenant string) AuditSinkTenantLister
	// Get retrieves the AuditSink from the index for a given name.
	Get(name string) (*v1alpha1.AuditSink, error)
	AuditSinkListerExpansion
}

// auditSinkLister implements the AuditSinkLister interface.
type auditSinkLister struct {
	indexer cache.Indexer
}

// NewAuditSinkLister returns a new AuditSinkLister.
func NewAuditSinkLister(indexer cache.Indexer) AuditSinkLister {
	return &auditSinkLister{indexer: indexer}
}

// List lists all AuditSinks in the indexer.
func (s *auditSinkLister) List(selector labels.Selector) (ret []*v1alpha1.AuditSink, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditSink))
	})
	return ret, err
}

// Get retrieves the AuditSink from the index for a given name.
func (s *auditSinkLister) Get(name string) (*v1alpha1.AuditSink, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("auditsink"), name)
	}
	return obj.(*v1alpha1.AuditSink), nil
}

// AuditSinks returns an object that can list and get AuditSinks.
func (s *auditSinkLister) AuditSinks() AuditSinkTenantLister {
	return auditSinkTenantLister{indexer: s.indexer, tenant: "system"}
}

func (s *auditSinkLister) AuditSinksWithMultiTenancy(tenant string) AuditSinkTenantLister {
	return auditSinkTenantLister{indexer: s.indexer, tenant: tenant}
}

// AuditSinkTenantLister helps list and get AuditSinks.
type AuditSinkTenantLister interface {
	// List lists all AuditSinks in the indexer for a given tenant/tenant.
	List(selector labels.Selector) (ret []*v1alpha1.AuditSink, err error)
	// Get retrieves the AuditSink from the indexer for a given tenant/tenant and name.
	Get(name string) (*v1alpha1.AuditSink, error)
	AuditSinkTenantListerExpansion
}

// auditSinkTenantLister implements the AuditSinkTenantLister
// interface.
type auditSinkTenantLister struct {
	indexer cache.Indexer
	tenant  string
}

// List lists all AuditSinks in the indexer for a given tenant.
func (s auditSinkTenantLister) List(selector labels.Selector) (ret []*v1alpha1.AuditSink, err error) {
	err = cache.ListAllByTenant(s.indexer, s.tenant, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AuditSink))
	})
	return ret, err
}

// Get retrieves the AuditSink from the indexer for a given tenant and name.
func (s auditSinkTenantLister) Get(name string) (*v1alpha1.AuditSink, error) {
	key := s.tenant + "/" + name
	if s.tenant == "system" {
		key = name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("auditsink"), name)
	}
	return obj.(*v1alpha1.AuditSink), nil
}
