/*
Copyright The Kubernetes Authors.
Copyright 2020 Authors of Arktos - file modified.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/imagepolicy/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ImageReviewLister helps list ImageReviews.
type ImageReviewLister interface {
	// List lists all ImageReviews in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ImageReview, err error)
	// ImageReviews returns an object that can list and get ImageReviews.
	ImageReviews() ImageReviewTenantLister
	ImageReviewsWithMultiTenancy(tenant string) ImageReviewTenantLister
	// Get retrieves the ImageReview from the index for a given name.
	Get(name string) (*v1alpha1.ImageReview, error)
	ImageReviewListerExpansion
}

// imageReviewLister implements the ImageReviewLister interface.
type imageReviewLister struct {
	indexer cache.Indexer
}

// NewImageReviewLister returns a new ImageReviewLister.
func NewImageReviewLister(indexer cache.Indexer) ImageReviewLister {
	return &imageReviewLister{indexer: indexer}
}

// List lists all ImageReviews in the indexer.
func (s *imageReviewLister) List(selector labels.Selector) (ret []*v1alpha1.ImageReview, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageReview))
	})
	return ret, err
}

// Get retrieves the ImageReview from the index for a given name.
func (s *imageReviewLister) Get(name string) (*v1alpha1.ImageReview, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagereview"), name)
	}
	return obj.(*v1alpha1.ImageReview), nil
}

// ImageReviews returns an object that can list and get ImageReviews.
func (s *imageReviewLister) ImageReviews() ImageReviewTenantLister {
	return imageReviewTenantLister{indexer: s.indexer, tenant: "system"}
}

func (s *imageReviewLister) ImageReviewsWithMultiTenancy(tenant string) ImageReviewTenantLister {
	return imageReviewTenantLister{indexer: s.indexer, tenant: tenant}
}

// ImageReviewTenantLister helps list and get ImageReviews.
type ImageReviewTenantLister interface {
	// List lists all ImageReviews in the indexer for a given tenant/tenant.
	List(selector labels.Selector) (ret []*v1alpha1.ImageReview, err error)
	// Get retrieves the ImageReview from the indexer for a given tenant/tenant and name.
	Get(name string) (*v1alpha1.ImageReview, error)
	ImageReviewTenantListerExpansion
}

// imageReviewTenantLister implements the ImageReviewTenantLister
// interface.
type imageReviewTenantLister struct {
	indexer cache.Indexer
	tenant  string
}

// List lists all ImageReviews in the indexer for a given tenant.
func (s imageReviewTenantLister) List(selector labels.Selector) (ret []*v1alpha1.ImageReview, err error) {
	err = cache.ListAllByTenant(s.indexer, s.tenant, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ImageReview))
	})
	return ret, err
}

// Get retrieves the ImageReview from the indexer for a given tenant and name.
func (s imageReviewTenantLister) Get(name string) (*v1alpha1.ImageReview, error) {
	key := s.tenant + "/" + name
	if s.tenant == "system" {
		key = name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("imagereview"), name)
	}
	return obj.(*v1alpha1.ImageReview), nil
}
