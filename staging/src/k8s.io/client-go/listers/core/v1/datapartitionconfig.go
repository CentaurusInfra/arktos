/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DataPartitionConfigLister helps list DataPartitionConfigs.
type DataPartitionConfigLister interface {
	// List lists all DataPartitionConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.DataPartitionConfig, err error)
	// Get retrieves the DataPartitionConfig from the index for a given name.
	Get(name string) (*v1.DataPartitionConfig, error)
	DataPartitionConfigListerExpansion
}

// dataPartitionConfigLister implements the DataPartitionConfigLister interface.
type dataPartitionConfigLister struct {
	indexer cache.Indexer
}

// NewDataPartitionConfigLister returns a new DataPartitionConfigLister.
func NewDataPartitionConfigLister(indexer cache.Indexer) DataPartitionConfigLister {
	return &dataPartitionConfigLister{indexer: indexer}
}

// List lists all DataPartitionConfigs in the indexer.
func (s *dataPartitionConfigLister) List(selector labels.Selector) (ret []*v1.DataPartitionConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.DataPartitionConfig))
	})
	return ret, err
}

// Get retrieves the DataPartitionConfig from the index for a given name.
func (s *dataPartitionConfigLister) Get(name string) (*v1.DataPartitionConfig, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("datapartitionconfig"), name)
	}
	return obj.(*v1.DataPartitionConfig), nil
}
