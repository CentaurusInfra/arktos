/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1 "k8s.io/arktos-ext/pkg/apis/arktosextensions/v1"
	"k8s.io/client-go/tools/cache"
)

// NetworkLister helps list Networks.
type NetworkLister interface {
	// List lists all Networks in the indexer.
	List(selector labels.Selector) (ret []*v1.Network, err error)
	// Networks returns an object that can list and get Networks.
	Networks() NetworkTenantLister
	NetworksWithMultiTenancy(tenant string) NetworkTenantLister
	// Get retrieves the Network from the index for a given name.
	Get(name string) (*v1.Network, error)
	NetworkListerExpansion
}

// networkLister implements the NetworkLister interface.
type networkLister struct {
	indexer cache.Indexer
}

// NewNetworkLister returns a new NetworkLister.
func NewNetworkLister(indexer cache.Indexer) NetworkLister {
	return &networkLister{indexer: indexer}
}

// List lists all Networks in the indexer.
func (s *networkLister) List(selector labels.Selector) (ret []*v1.Network, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Network))
	})
	return ret, err
}

// Get retrieves the Network from the index for a given name.
func (s *networkLister) Get(name string) (*v1.Network, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("network"), name)
	}
	return obj.(*v1.Network), nil
}

// Networks returns an object that can list and get Networks.
func (s *networkLister) Networks() NetworkTenantLister {
	return networkTenantLister{indexer: s.indexer, tenant: "system"}
}

func (s *networkLister) NetworksWithMultiTenancy(tenant string) NetworkTenantLister {
	return networkTenantLister{indexer: s.indexer, tenant: tenant}
}

// NetworkTenantLister helps list and get Networks.
type NetworkTenantLister interface {
	// List lists all Networks in the indexer for a given tenant/tenant.
	List(selector labels.Selector) (ret []*v1.Network, err error)
	// Get retrieves the Network from the indexer for a given tenant/tenant and name.
	Get(name string) (*v1.Network, error)
	NetworkTenantListerExpansion
}

// networkTenantLister implements the NetworkTenantLister
// interface.
type networkTenantLister struct {
	indexer cache.Indexer
	tenant  string
}

// List lists all Networks in the indexer for a given tenant.
func (s networkTenantLister) List(selector labels.Selector) (ret []*v1.Network, err error) {
	err = cache.ListAllByTenant(s.indexer, s.tenant, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Network))
	})
	return ret, err
}

// Get retrieves the Network from the indexer for a given tenant and name.
func (s networkTenantLister) Get(name string) (*v1.Network, error) {
	key := s.tenant + "/" + name
	if s.tenant == "system" {
		key = name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("network"), name)
	}
	return obj.(*v1.Network), nil
}
