/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubernetes/pkg/apis/cloudgateway/v1"
)

// EServiceLister helps list EServices.
type EServiceLister interface {
	// List lists all EServices in the indexer.
	List(selector labels.Selector) (ret []*v1.EService, err error)
	// EServices returns an object that can list and get EServices.
	EServices(namespace string) EServiceNamespaceLister
	EServicesWithMultiTenancy(namespace string, tenant string) EServiceNamespaceLister
	EServiceListerExpansion
}

// eServiceLister implements the EServiceLister interface.
type eServiceLister struct {
	indexer cache.Indexer
}

// NewEServiceLister returns a new EServiceLister.
func NewEServiceLister(indexer cache.Indexer) EServiceLister {
	return &eServiceLister{indexer: indexer}
}

// List lists all EServices in the indexer.
func (s *eServiceLister) List(selector labels.Selector) (ret []*v1.EService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EService))
	})
	return ret, err
}

// EServices returns an object that can list and get EServices.
func (s *eServiceLister) EServices(namespace string) EServiceNamespaceLister {
	return eServiceNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: "system"}
}

func (s *eServiceLister) EServicesWithMultiTenancy(namespace string, tenant string) EServiceNamespaceLister {
	return eServiceNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: tenant}
}

// EServiceNamespaceLister helps list and get EServices.
type EServiceNamespaceLister interface {
	// List lists all EServices in the indexer for a given tenant/namespace.
	List(selector labels.Selector) (ret []*v1.EService, err error)
	// Get retrieves the EService from the indexer for a given tenant/namespace and name.
	Get(name string) (*v1.EService, error)
	EServiceNamespaceListerExpansion
}

// eServiceNamespaceLister implements the EServiceNamespaceLister
// interface.
type eServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    string
}

// List lists all EServices in the indexer for a given namespace.
func (s eServiceNamespaceLister) List(selector labels.Selector) (ret []*v1.EService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.tenant, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EService))
	})
	return ret, err
}

// Get retrieves the EService from the indexer for a given namespace and name.
func (s eServiceNamespaceLister) Get(name string) (*v1.EService, error) {
	key := s.tenant + "/" + s.namespace + "/" + name
	if s.tenant == "system" {
		key = s.namespace + "/" + name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("eservice"), name)
	}
	return obj.(*v1.EService), nil
}
