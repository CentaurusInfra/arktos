/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubernetes/pkg/apis/cloudgateway/v1"
)

// ESiteLister helps list ESites.
type ESiteLister interface {
	// List lists all ESites in the indexer.
	List(selector labels.Selector) (ret []*v1.ESite, err error)
	// ESites returns an object that can list and get ESites.
	ESites(namespace string) ESiteNamespaceLister
	ESitesWithMultiTenancy(namespace string, tenant string) ESiteNamespaceLister
	ESiteListerExpansion
}

// eSiteLister implements the ESiteLister interface.
type eSiteLister struct {
	indexer cache.Indexer
}

// NewESiteLister returns a new ESiteLister.
func NewESiteLister(indexer cache.Indexer) ESiteLister {
	return &eSiteLister{indexer: indexer}
}

// List lists all ESites in the indexer.
func (s *eSiteLister) List(selector labels.Selector) (ret []*v1.ESite, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ESite))
	})
	return ret, err
}

// ESites returns an object that can list and get ESites.
func (s *eSiteLister) ESites(namespace string) ESiteNamespaceLister {
	return eSiteNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: "system"}
}

func (s *eSiteLister) ESitesWithMultiTenancy(namespace string, tenant string) ESiteNamespaceLister {
	return eSiteNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: tenant}
}

// ESiteNamespaceLister helps list and get ESites.
type ESiteNamespaceLister interface {
	// List lists all ESites in the indexer for a given tenant/namespace.
	List(selector labels.Selector) (ret []*v1.ESite, err error)
	// Get retrieves the ESite from the indexer for a given tenant/namespace and name.
	Get(name string) (*v1.ESite, error)
	ESiteNamespaceListerExpansion
}

// eSiteNamespaceLister implements the ESiteNamespaceLister
// interface.
type eSiteNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    string
}

// List lists all ESites in the indexer for a given namespace.
func (s eSiteNamespaceLister) List(selector labels.Selector) (ret []*v1.ESite, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.tenant, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ESite))
	})
	return ret, err
}

// Get retrieves the ESite from the indexer for a given namespace and name.
func (s eSiteNamespaceLister) Get(name string) (*v1.ESite, error) {
	key := s.tenant + "/" + s.namespace + "/" + name
	if s.tenant == "system" {
		key = s.namespace + "/" + name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("esite"), name)
	}
	return obj.(*v1.ESite), nil
}
