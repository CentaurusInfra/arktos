/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubernetes/pkg/apis/cloudgateway/v1"
)

// EGatewayLister helps list EGateways.
type EGatewayLister interface {
	// List lists all EGateways in the indexer.
	List(selector labels.Selector) (ret []*v1.EGateway, err error)
	// EGateways returns an object that can list and get EGateways.
	EGateways(namespace string) EGatewayNamespaceLister
	EGatewaysWithMultiTenancy(namespace string, tenant string) EGatewayNamespaceLister
	EGatewayListerExpansion
}

// eGatewayLister implements the EGatewayLister interface.
type eGatewayLister struct {
	indexer cache.Indexer
}

// NewEGatewayLister returns a new EGatewayLister.
func NewEGatewayLister(indexer cache.Indexer) EGatewayLister {
	return &eGatewayLister{indexer: indexer}
}

// List lists all EGateways in the indexer.
func (s *eGatewayLister) List(selector labels.Selector) (ret []*v1.EGateway, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EGateway))
	})
	return ret, err
}

// EGateways returns an object that can list and get EGateways.
func (s *eGatewayLister) EGateways(namespace string) EGatewayNamespaceLister {
	return eGatewayNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: "system"}
}

func (s *eGatewayLister) EGatewaysWithMultiTenancy(namespace string, tenant string) EGatewayNamespaceLister {
	return eGatewayNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: tenant}
}

// EGatewayNamespaceLister helps list and get EGateways.
type EGatewayNamespaceLister interface {
	// List lists all EGateways in the indexer for a given tenant/namespace.
	List(selector labels.Selector) (ret []*v1.EGateway, err error)
	// Get retrieves the EGateway from the indexer for a given tenant/namespace and name.
	Get(name string) (*v1.EGateway, error)
	EGatewayNamespaceListerExpansion
}

// eGatewayNamespaceLister implements the EGatewayNamespaceLister
// interface.
type eGatewayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    string
}

// List lists all EGateways in the indexer for a given namespace.
func (s eGatewayNamespaceLister) List(selector labels.Selector) (ret []*v1.EGateway, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.tenant, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EGateway))
	})
	return ret, err
}

// Get retrieves the EGateway from the indexer for a given namespace and name.
func (s eGatewayNamespaceLister) Get(name string) (*v1.EGateway, error) {
	key := s.tenant + "/" + s.namespace + "/" + name
	if s.tenant == "system" {
		key = s.namespace + "/" + name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("egateway"), name)
	}
	return obj.(*v1.EGateway), nil
}
