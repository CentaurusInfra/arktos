/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubernetes/pkg/apis/cloudgateway/v1"
)

// EServerLister helps list EServers.
type EServerLister interface {
	// List lists all EServers in the indexer.
	List(selector labels.Selector) (ret []*v1.EServer, err error)
	// EServers returns an object that can list and get EServers.
	EServers(namespace string) EServerNamespaceLister
	EServersWithMultiTenancy(namespace string, tenant string) EServerNamespaceLister
	EServerListerExpansion
}

// eServerLister implements the EServerLister interface.
type eServerLister struct {
	indexer cache.Indexer
}

// NewEServerLister returns a new EServerLister.
func NewEServerLister(indexer cache.Indexer) EServerLister {
	return &eServerLister{indexer: indexer}
}

// List lists all EServers in the indexer.
func (s *eServerLister) List(selector labels.Selector) (ret []*v1.EServer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EServer))
	})
	return ret, err
}

// EServers returns an object that can list and get EServers.
func (s *eServerLister) EServers(namespace string) EServerNamespaceLister {
	return eServerNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: "system"}
}

func (s *eServerLister) EServersWithMultiTenancy(namespace string, tenant string) EServerNamespaceLister {
	return eServerNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: tenant}
}

// EServerNamespaceLister helps list and get EServers.
type EServerNamespaceLister interface {
	// List lists all EServers in the indexer for a given tenant/namespace.
	List(selector labels.Selector) (ret []*v1.EServer, err error)
	// Get retrieves the EServer from the indexer for a given tenant/namespace and name.
	Get(name string) (*v1.EServer, error)
	EServerNamespaceListerExpansion
}

// eServerNamespaceLister implements the EServerNamespaceLister
// interface.
type eServerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    string
}

// List lists all EServers in the indexer for a given namespace.
func (s eServerNamespaceLister) List(selector labels.Selector) (ret []*v1.EServer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.tenant, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.EServer))
	})
	return ret, err
}

// Get retrieves the EServer from the indexer for a given namespace and name.
func (s eServerNamespaceLister) Get(name string) (*v1.EServer, error) {
	key := s.tenant + "/" + s.namespace + "/" + name
	if s.tenant == "system" {
		key = s.namespace + "/" + name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("eserver"), name)
	}
	return obj.(*v1.EServer), nil
}
