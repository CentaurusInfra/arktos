/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubernetes/pkg/apis/cloudgateway/v1"
)

// ServiceExposeLister helps list ServiceExposes.
type ServiceExposeLister interface {
	// List lists all ServiceExposes in the indexer.
	List(selector labels.Selector) (ret []*v1.ServiceExpose, err error)
	// ServiceExposes returns an object that can list and get ServiceExposes.
	ServiceExposes(namespace string) ServiceExposeNamespaceLister
	ServiceExposesWithMultiTenancy(namespace string, tenant string) ServiceExposeNamespaceLister
	ServiceExposeListerExpansion
}

// serviceExposeLister implements the ServiceExposeLister interface.
type serviceExposeLister struct {
	indexer cache.Indexer
}

// NewServiceExposeLister returns a new ServiceExposeLister.
func NewServiceExposeLister(indexer cache.Indexer) ServiceExposeLister {
	return &serviceExposeLister{indexer: indexer}
}

// List lists all ServiceExposes in the indexer.
func (s *serviceExposeLister) List(selector labels.Selector) (ret []*v1.ServiceExpose, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceExpose))
	})
	return ret, err
}

// ServiceExposes returns an object that can list and get ServiceExposes.
func (s *serviceExposeLister) ServiceExposes(namespace string) ServiceExposeNamespaceLister {
	return serviceExposeNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: "system"}
}

func (s *serviceExposeLister) ServiceExposesWithMultiTenancy(namespace string, tenant string) ServiceExposeNamespaceLister {
	return serviceExposeNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: tenant}
}

// ServiceExposeNamespaceLister helps list and get ServiceExposes.
type ServiceExposeNamespaceLister interface {
	// List lists all ServiceExposes in the indexer for a given tenant/namespace.
	List(selector labels.Selector) (ret []*v1.ServiceExpose, err error)
	// Get retrieves the ServiceExpose from the indexer for a given tenant/namespace and name.
	Get(name string) (*v1.ServiceExpose, error)
	ServiceExposeNamespaceListerExpansion
}

// serviceExposeNamespaceLister implements the ServiceExposeNamespaceLister
// interface.
type serviceExposeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    string
}

// List lists all ServiceExposes in the indexer for a given namespace.
func (s serviceExposeNamespaceLister) List(selector labels.Selector) (ret []*v1.ServiceExpose, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.tenant, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ServiceExpose))
	})
	return ret, err
}

// Get retrieves the ServiceExpose from the indexer for a given namespace and name.
func (s serviceExposeNamespaceLister) Get(name string) (*v1.ServiceExpose, error) {
	key := s.tenant + "/" + s.namespace + "/" + name
	if s.tenant == "system" {
		key = s.namespace + "/" + name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("serviceexpose"), name)
	}
	return obj.(*v1.ServiceExpose), nil
}
