/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1 "k8s.io/kubernetes/pkg/apis/cloudgateway/v1"
)

// VirtualPresenceLister helps list VirtualPresences.
type VirtualPresenceLister interface {
	// List lists all VirtualPresences in the indexer.
	List(selector labels.Selector) (ret []*v1.VirtualPresence, err error)
	// VirtualPresences returns an object that can list and get VirtualPresences.
	VirtualPresences(namespace string) VirtualPresenceNamespaceLister
	VirtualPresencesWithMultiTenancy(namespace string, tenant string) VirtualPresenceNamespaceLister
	VirtualPresenceListerExpansion
}

// virtualPresenceLister implements the VirtualPresenceLister interface.
type virtualPresenceLister struct {
	indexer cache.Indexer
}

// NewVirtualPresenceLister returns a new VirtualPresenceLister.
func NewVirtualPresenceLister(indexer cache.Indexer) VirtualPresenceLister {
	return &virtualPresenceLister{indexer: indexer}
}

// List lists all VirtualPresences in the indexer.
func (s *virtualPresenceLister) List(selector labels.Selector) (ret []*v1.VirtualPresence, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualPresence))
	})
	return ret, err
}

// VirtualPresences returns an object that can list and get VirtualPresences.
func (s *virtualPresenceLister) VirtualPresences(namespace string) VirtualPresenceNamespaceLister {
	return virtualPresenceNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: "system"}
}

func (s *virtualPresenceLister) VirtualPresencesWithMultiTenancy(namespace string, tenant string) VirtualPresenceNamespaceLister {
	return virtualPresenceNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: tenant}
}

// VirtualPresenceNamespaceLister helps list and get VirtualPresences.
type VirtualPresenceNamespaceLister interface {
	// List lists all VirtualPresences in the indexer for a given tenant/namespace.
	List(selector labels.Selector) (ret []*v1.VirtualPresence, err error)
	// Get retrieves the VirtualPresence from the indexer for a given tenant/namespace and name.
	Get(name string) (*v1.VirtualPresence, error)
	VirtualPresenceNamespaceListerExpansion
}

// virtualPresenceNamespaceLister implements the VirtualPresenceNamespaceLister
// interface.
type virtualPresenceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    string
}

// List lists all VirtualPresences in the indexer for a given namespace.
func (s virtualPresenceNamespaceLister) List(selector labels.Selector) (ret []*v1.VirtualPresence, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.tenant, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VirtualPresence))
	})
	return ret, err
}

// Get retrieves the VirtualPresence from the indexer for a given namespace and name.
func (s virtualPresenceNamespaceLister) Get(name string) (*v1.VirtualPresence, error) {
	key := s.tenant + "/" + s.namespace + "/" + name
	if s.tenant == "system" {
		key = s.namespace + "/" + name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("virtualpresence"), name)
	}
	return obj.(*v1.VirtualPresence), nil
}
